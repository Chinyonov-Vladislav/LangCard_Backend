{
    "openapi": "3.0.0",
    "info": {
        "title": "Lang Cards API v1",
        "description": "Lang Cards API ",
        "contact": {
            "email": "vlad2000100600@gmail.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000/api/v1",
            "description": "Local development server"
        }
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Authenticate user",
                "description": "Authenticates user with email/password. Returns access tokens or 2FA data if enabled.",
                "operationId": "da73042d1ae72bb5a5531c2b9c96f8c6",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "description": "User credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "status": {
                                                    "enum": [
                                                        "success",
                                                        "error"
                                                    ],
                                                    "example": "success"
                                                },
                                                "data": {
                                                    "properties": {
                                                        "access_token": {
                                                            "type": "string"
                                                        },
                                                        "email_is_verified": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "status": {
                                                    "enum": [
                                                        "success",
                                                        "error"
                                                    ],
                                                    "example": "success"
                                                },
                                                "data": {
                                                    "properties": {
                                                        "two_factor_email_enabled": {
                                                            "type": "boolean"
                                                        },
                                                        "two_factor_google_authenticator_enabled": {
                                                            "type": "boolean"
                                                        },
                                                        "two_factor_token": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Включена двухфакторная авторизация"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/{provider}/redirect": {
            "get": {
                "tags": [
                    "Аутентификация через OAuth"
                ],
                "summary": "Получить OAuth redirect URL для провайдера",
                "operationId": "d14ca4bff0d39ab2f2fdd7b4debb9947",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "provider",
                        "in": "path",
                        "description": "Провайдер OAuth аутентификации",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "google",
                                "yandex",
                                "microsoft"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL редиректа получен успешно",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "OAuth URL получен успешно"
                                        },
                                        "data": {
                                            "properties": {
                                                "url": {
                                                    "type": "string",
                                                    "example": "https://accounts.google.com/o/oauth2/auth?..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Неподдерживаемый провайдер",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Провайдер 'facebook' не поддерживается."
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/{provider}/callback": {
            "get": {
                "tags": [
                    "Аутентификация через OAuth"
                ],
                "summary": "OAuth Callback от провайдера",
                "description": "Обработка callback-аутентификации от OAuth-провайдера. Возвращает access_token или two_factor_token. Устанавливает refresh_token в cookie.",
                "operationId": "2a9f8a3ae326c4955427f4381ec10656",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "provider",
                        "in": "path",
                        "description": "Провайдер OAuth-аутентификации",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "google",
                                "yandex",
                                "microsoft"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация или требуется двухфакторная авторизация",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Refresh токен устанавливается в cookie (если 2FA отключена)",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=abc123; HttpOnly; Secure"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "status": {
                                                    "enum": [
                                                        "success",
                                                        "error"
                                                    ],
                                                    "example": "success"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Авторизация прошла успешно."
                                                },
                                                "data": {
                                                    "properties": {
                                                        "access_token": {
                                                            "type": "string",
                                                            "example": "eyJhbGciOiJIUzI1..."
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "status": {
                                                    "enum": [
                                                        "success",
                                                        "error"
                                                    ],
                                                    "example": "success"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Включена двухфакторная авторизация"
                                                },
                                                "data": {
                                                    "properties": {
                                                        "two_factor_email_enabled": {
                                                            "type": "boolean",
                                                            "example": true
                                                        },
                                                        "two_factor_google_authenticator_enabled": {
                                                            "type": "boolean",
                                                            "example": false
                                                        },
                                                        "two_factor_token": {
                                                            "type": "string",
                                                            "example": "abc123def456"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Провайдер не поддерживается",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Провайдер 'facebook' не поддерживается."
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка при аутентификации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Произошла ошибка при авторизации через yandex."
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "tags": [
                    "Обновление токенов авторизации"
                ],
                "summary": "Обновление access и refresh токенов",
                "description": "Обновляет access токен и refresh токен пользователя, используя refresh token из cookie",
                "operationId": "refreshTokens",
                "parameters": [
                    {
                        "name": "refresh_token",
                        "in": "cookie",
                        "description": "Refresh токен, передаваемый через cookie",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токены успешно обновлены",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Access и Refresh токены успешно обновлены"
                                        },
                                        "data": {
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Невалидный refresh токен или отсутствует токен",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Невалидный refresh токен"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Недопустимый тип владельца токена",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Недопустимый тип владельца токена"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Выход из аккаунта"
                ],
                "summary": "Выход из системы (отзыв токенов)",
                "description": "Удаляет access и refresh токены текущего авторизованного пользователя. Требуется Bearer токен.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Успешный выход из системы",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь успешно вышел из системы"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользовать не авторизован и не имеет доступа к данным"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/password/sendResetLink": {
            "post": {
                "tags": [
                    "Сброс пароля для неавторизованного пользователя"
                ],
                "summary": "Отправка ссылки для сброса пароля",
                "description": "Отправляет письмо со ссылкой для сброса пароля на указанный email",
                "operationId": "88a461eccd7c931c5674bb6f82196dcd",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendResetLinkRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ссылка успешно отправлена",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Ссылка для сброса пароля отправлена."
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Пользователь с таким email зарегистрирован через OAuth или не существует",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь не зарегистрирован с паролем."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Поле email обязательно для заполнения."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/password/reset": {
            "post": {
                "tags": [
                    "Сброс пароля для неавторизованного пользователя"
                ],
                "summary": "Сброс пароля пользователя",
                "description": "Позволяет сбросить пароль по email и токену сброса",
                "operationId": "resetPassword",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Пароль успешно изменён",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User password changed successfully"
                                        },
                                        "data": {
                                            "description": "Пустой объект или null",
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный токен сброса пароля",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid password reset token"
                                        },
                                        "errors": {
                                            "description": "Дополнительные ошибки",
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "410": {
                        "description": "Истёкший токен сброса пароля",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Expired password reset token"
                                        },
                                        "errors": {
                                            "description": "Дополнительные ошибки",
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибки валидации запроса",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ],
                                                "password": [
                                                    "The password must be at least 8 characters."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/updatePassword": {
            "post": {
                "tags": [
                    "Обновление пароля авторизованного пользователя"
                ],
                "summary": "Обновление пароля авторизованного пользователя",
                "description": "Позволяет авторизованному пользователю обновить свой пароль, если он зарегистрирован с email и паролем.",
                "operationId": "updatePassword",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Пароль успешно обновлён",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пароль пользователя успешно изменён"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Пользователь не зарегистрирован с email и паролем, смена пароля невозможна",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Текущий авторизованный пользователь не зарегистрирован с использованием email - адреса и пароля, поэтому не обладает возможностью сменить пароль!"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользовать не авторизован и не имеет доступа к данным"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/registration": {
            "post": {
                "tags": [
                    "Регистрация"
                ],
                "summary": "Регистрация нового пользователя",
                "operationId": "registerUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь успешно зарегистрирован"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации входных данных",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Поле email уже используется."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при регистрации пользователя",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "success",
                                                "error"
                                            ],
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Не удалось зарегистрировать пользователя."
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sendVerificationCodeEmail": {
            "post": {
                "tags": [
                    "Верификация электронного адреса"
                ],
                "summary": "Отправка кода подтверждения на email",
                "description": "Отправляет код подтверждения на email текущего авторизованного пользователя, если его email ещё не был подтверждён.",
                "operationId": "sendVerificationCodeEmail",
                "responses": {
                    "200": {
                        "description": "Код подтверждения успешно отправлен",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Сообщение с кодом для подтверждения email - адреса было отправлено на электронный адрес, указанный при регистрации"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email уже подтверждён",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Email - адрес текущего авторизованного пользователя уже был ранее подтвержден!"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользовать не авторизован и не имеет доступа к данным"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при генерации кода",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Произошла ошибка при генерации кода"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/verificationEmailAddress": {
            "post": {
                "tags": [
                    "Верификация электронного адреса"
                ],
                "summary": "Подтверждение email авторизованного пользователя кодом",
                "description": "Позволяет подтвердить email пользователя по коду, отправленному на электронную почту.",
                "operationId": "verificationEmailAddress",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailVerificationCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email успешно подтверждён",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Электронный адрес авторизованного пользователя был успешно подтвержден"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь с id = 5 не найден"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email уже подтверждён",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Email - адрес текущего авторизованного пользователя уже был ранее подтвержден!"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Код не был запрошен ранее",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Текущий авторизованный пользователь не запрашивал код для подтверждения почты"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "412": {
                        "description": "Неверный код подтверждения",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Предоставленный код не соответствует коду из электронного сообщения"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользовать не авторизован и не имеет доступа к данным"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Предоставленные данные не валидны"
                                        },
                                        "errors": {
                                            "properties": {
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Token is required"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/setInviter": {
            "post": {
                "tags": [
                    "Привязка к пользователю, который пригласил в систему"
                ],
                "summary": "Установить пригласившего пользователя",
                "description": "Позволяет авторизованному пользователю указать другого пользователя, который его пригласил, по коду приглашения.",
                "operationId": "setInviter",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetInviterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Успешная установка пригласившего пользователя",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Благодарим! Вы указали пригласившего пользователя."
                                        },
                                        "data": {
                                            "required": [
                                                "inviter"
                                            ],
                                            "properties": {
                                                "inviter": {
                                                    "$ref": "#/components/schemas/InviterResource"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользовать не авторизован и не имеет доступа к данным"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Не найден пользователь с таким кодом",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Не найден пользователь, владеющий данным invite-кодом"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Конфликт — код уже установлен, код невалиден или нарушает бизнес-логику",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Конфликт — код уже установлен, код невалиден или нарушает бизнес-логику"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "invite_code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Invite Code is required"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/twoFactorVerification": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Включение или отключение двухфакторной аутентификации",
                "description": "Включает или отключает двухфакторную аутентификацию (email или Google Authenticator) для текущего пользователя",
                "operationId": "enableDisableTwoFactorAuthorization",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnableDisableATwoFactorAuthorizationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Двухфакторная авторизация успешно включена или отключена",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Двухфакторная авторизация через Google Authenticator подключена"
                                        },
                                        "data": {
                                            "properties": {
                                                "email2fa_enable": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "google2fa_enable": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "secret": {
                                                    "type": "string",
                                                    "example": "JBSWY3DPEHPK3PXP",
                                                    "nullable": true
                                                },
                                                "qr": {
                                                    "description": "QR-код в base64",
                                                    "type": "string",
                                                    "format": "byte",
                                                    "nullable": true
                                                },
                                                "recovery_codes": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "8XF2-HZ91"
                                                    },
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Неподдерживаемый тип двухфакторной авторизации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Неподдерживаемый тип двухфакторной авторизации"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Невозможно включить двухфакторную аутентификацию по email (email отсутствует)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Вы не можете включить двухфакторную авторизацию через электронную почту, так как аккаунт не имеет электронной почты"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка генерации Google QR-кода или ключа",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Произошла ошибка при подключении двухфакторной авторизации через Google Authenticator"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/twoFactorVerification/sendEmailWithCode": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Отправка email с кодом двухфакторной аутентификации",
                "description": "Отправляет код подтверждения на email пользователя, если включена двухфакторная авторизация через email.",
                "operationId": "sendEmailWithCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TwoFactorAuthorizationTokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Код успешно отправлен на email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Сообщение с кодом было отправлено на электронную почту"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "У пользователя отключена двухфакторная авторизация по email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Для пользователя с email - адресом выключена двухфакторная авторизация"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Токен не найден",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Отсутствует запись о токене двухфакторной авторизации"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации токена",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "token": [
                                                    "Token is required"
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/twoFactorVerification/confirmEmailCode": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Подтверждение кода двухфакторной аутентификации по Email",
                "description": "Подтверждение кода, отправленного по Email для двухфакторной аутентификации.",
                "operationId": "confirmCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmationCodeEmailTwoFactorAuthorizationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Пользователь успешно прошёл двухфакторную авторизацию",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Refresh token cookie",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь успешно прошёл двухфакторную авторизацию"
                                        },
                                        "data": {
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Введенный код некорректен",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Введенный код некорректен! Повторите попытку ввода!"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Отсутствует запись о токене двухфакторной авторизации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Отсутствует запись о токене двухфакторной авторизации"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Двухфакторная авторизация отключена или код не запрашивался",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Для текущего пользователя отключена двухфакторная авторизация | Текущий пользователь не запрашивал код для двухфакторной авторизации по электронной почте"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "410": {
                        "description": "Срок действия кода истёк",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Срок действия кода истёк. Запросите новый код"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/twoFactorVerification/verifyCodeGoogle2fa": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Подтверждение Google Authenticator кода",
                "description": "Подтверждает код из приложения Google Authenticator. При успешной проверке возвращает access token и устанавливает refresh token в cookie.",
                "operationId": "verifyCodeGoogle2fa",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeGoogleAuthenticatorRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Пользователь успешно прошёл двухфакторную авторизацию",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Устанавливает refresh_token в cookie",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=...; HttpOnly; Path=/; Max-Age=3600"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь успешно прошёл двухфакторную авторизацию"
                                        },
                                        "data": {
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJhbGciOi..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "У пользователя отключена двухфакторная аутентификация через Google",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Двухфакторная авторизация через Google Authenticator отключена"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Не найден токен двухфакторной авторизации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Отсутствует запись о токене двухфакторной авторизации"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Неверный код от Google Authenticator",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Неверный код двухфакторной авторизации через Google Authenticator"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации полей запроса",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "code": [
                                                    "The code is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/twoFactorVerification/useRecoveryCode": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Использование кода восстановления двухфакторной авторизации",
                "description": "Позволяет пройти двухфакторную авторизацию с использованием кода восстановления.",
                "operationId": "useRecoveryCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UseRecoveryCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Устанавливает refresh_token в cookie",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=...; HttpOnly; Path=/; Max-Age=3600"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Пользователь успешно прошёл двухфакторную авторизацию"
                                        },
                                        "data": {
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJh..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Токен или код восстановления не найдены",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Отсутствует запись о токене двухфакторной авторизации"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Нет доступных кодов восстановления",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Для текущего пользователя не осталось активных кодов восстановления"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "У пользователя отключена двухфакторная авторизация",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Для данного пользователя отключена двухфакторная авторизация"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "token": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Token is required"
                                                    }
                                                },
                                                "recovery_code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Recovery code must be a string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/twoFactorVerification/refreshRecoveryCodes": {
            "post": {
                "tags": [
                    "Двухфакторная аутентификация"
                ],
                "summary": "Обновить резервные коды двухфакторной авторизации",
                "description": "Обновляет резервные коды для авторизованного пользователя, если двухфакторная авторизация включена и все старые коды использованы.",
                "operationId": "refreshRecoveryCodes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление резервных кодов",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Новые резервные коды"
                                        },
                                        "data": {
                                            "properties": {
                                                "recovery_codes": {
                                                    "description": "Список новых резервных кодов",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Двухфакторная авторизация отключена для пользователя",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Для данного пользователя отключена двухфакторная авторизация, поэтому обновление резервных кодов невозможно"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Пользователь еще не использовал все ранее предоставленные коды",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Текущий авторизованный пользователь не использовал все ранее предоставленные резервные коды"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AuthRequest": {
                "title": "Auth Request (Данные для авторизации)",
                "description": "Данные, необходимые для авторизации пользователя",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "example": "user@example.com"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 8,
                        "example": "password123"
                    }
                },
                "type": "object"
            },
            "RegistrationRequest": {
                "title": "Registration Request (Данные для регистрации)",
                "description": "Данные, необходимые для регистрации нового пользователя",
                "required": [
                    "name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Иван Иванов"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "example": "ivan@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$",
                        "example": "Str0ngP@ssword!"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "format": "password",
                        "example": "Str0ngP@ssword!"
                    }
                },
                "type": "object"
            },
            "ResetPasswordRequest": {
                "title": "Reset Password Request (Данные для сброса пароля неавторизованного пользователя)",
                "description": "Данные, необходимые для сброса пароля пользователя",
                "required": [
                    "email",
                    "password",
                    "password_confirmation",
                    "token"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "example": "user@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$",
                        "example": "NewP@ssword2025"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "format": "password",
                        "example": "NewP@ssword2025"
                    },
                    "token": {
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJh..."
                    }
                },
                "type": "object"
            },
            "SendResetLinkRequest": {
                "title": "Send Reset Link Request (Данные для отправки электронного сообщения на email - адрес с ссылкой для сброса пароля)",
                "description": "Данные, необходимые для отправки ссылки для сброс пароля неавторизованного пользователя",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255,
                        "example": "user@example.com"
                    }
                },
                "type": "object"
            },
            "CreatingCardForDeckRequest": {
                "title": "Creating Card For Deck Request (Создание карточки в колоде)",
                "description": "Данные, небходимые для создания новой карточки для колоды",
                "required": [
                    "deck_id",
                    "word",
                    "translate"
                ],
                "properties": {
                    "deck_id": {
                        "description": "ID существующей колоды",
                        "type": "integer",
                        "example": 12
                    },
                    "word": {
                        "description": "Оригинальное слово",
                        "type": "string",
                        "maxLength": 255,
                        "example": "apple"
                    },
                    "translate": {
                        "description": "Перевод слова",
                        "type": "string",
                        "maxLength": 255,
                        "example": "яблоко"
                    },
                    "imagePath": {
                        "description": "Путь к изображению (если передаётся)",
                        "type": "string",
                        "example": "/images/cards/apple.jpg",
                        "nullable": true
                    },
                    "originalVoices": {
                        "description": "Массив ID оригинальных голосов",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "abc123-voice-id"
                        },
                        "nullable": true
                    },
                    "targetVoices": {
                        "description": "Массив ID целевых голосов",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "xyz789-voice-id"
                        },
                        "nullable": true
                    },
                    "examples": {
                        "description": "Примеры употребления слова",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "I eat an apple every day."
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CheckCorrectSentenceRequest": {
                "title": "Check Correct Sentence Request (Проверка правильности предложения)",
                "description": "Данные для проверки грамматической корректности текста",
                "required": [
                    "language",
                    "text"
                ],
                "properties": {
                    "language": {
                        "description": "Код языка (например: en, ru, fr)",
                        "type": "string",
                        "example": "en"
                    },
                    "text": {
                        "description": "Предложение для проверки",
                        "type": "string",
                        "example": "This is a test sentence."
                    }
                },
                "type": "object"
            },
            "CreateDeckRequest": {
                "title": "Create Deck Request (Создание колоды)",
                "description": "Данные для создания новой языковой колоды",
                "required": [
                    "name",
                    "original_language_id",
                    "target_language_id"
                ],
                "properties": {
                    "name": {
                        "description": "Название колоды",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Фрукты и овощи"
                    },
                    "original_language_id": {
                        "description": "ID оригинального языка (например, английский)",
                        "type": "integer",
                        "example": 1
                    },
                    "target_language_id": {
                        "description": "ID целевого языка (например, испанский); должен отличаться от оригинального",
                        "type": "integer",
                        "example": 2
                    },
                    "is_premium": {
                        "description": "Флаг премиум-доступа к колоде",
                        "type": "boolean",
                        "example": false
                    },
                    "topic_ids": {
                        "description": "Список ID тем, связанных с колодой",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 3
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "DeckFilterRequest": {
                "title": "Deck Filter Request (Фильтрация колод)",
                "description": "Параметры фильтрации колод, передаются через query string",
                "properties": {
                    "page": {
                        "description": "Номер страницы",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "countOnPage": {
                        "description": "Количество элементов на странице",
                        "type": "integer",
                        "minimum": 1,
                        "example": 10
                    },
                    "originalLanguages": {
                        "description": "Коды оригинальных языков через запятую. Пример: en,fr,de",
                        "type": "string",
                        "example": "en,fr"
                    },
                    "targetLanguages": {
                        "description": "Коды целевых языков через запятую. Пример: es,it",
                        "type": "string",
                        "example": "es,it"
                    },
                    "showPremium": {
                        "description": "Тип фильтрации премиум-колод: only — только премиум, exclude — исключить премиум, all — все.",
                        "type": "string",
                        "enum": [
                            "only",
                            "exclude",
                            "all"
                        ],
                        "example": "all"
                    }
                },
                "type": "object"
            },
            "EmailVerificationCodeRequest": {
                "title": "Email Verification Code Request (Данные для подтверждения электронной почты)",
                "description": "Запрос на подтверждение email кодом",
                "required": [
                    "code"
                ],
                "properties": {
                    "code": {
                        "description": "Код подтверждения email, состоящий из ровно 6 цифр",
                        "type": "string",
                        "pattern": "^\\d{6}$",
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "GetHistoryAttemptsRequestQueryParams": {
                "title": "Get History Attempts Request Query Params (Параметры запроса истории попыток прохождения тестов)",
                "description": "Query-параметры для получения истории попыток. Оба параметра являются необязательными и используются для пагинации.",
                "properties": {
                    "page": {
                        "description": "Номер страницы",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "countOnPage": {
                        "description": "Количество элементов на странице",
                        "type": "integer",
                        "minimum": 1,
                        "example": 10
                    }
                },
                "type": "object"
            },
            "GetHistoryPurchaseRequest": {
                "title": "Get History Purchase Request Query Params (Параметры запроса истории покупок)",
                "description": "Query-параметры для получения истории покупок. Оба параметра являются необязательными и используются для пагинации.",
                "properties": {
                    "page": {
                        "description": "Номер страницы",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "countOnPage": {
                        "description": "Количество элементов на странице",
                        "type": "integer",
                        "minimum": 1,
                        "example": 10
                    }
                },
                "type": "object"
            },
            "SetInviterRequest": {
                "title": "Set Inviter Request (Установка пригласившего пользователя)",
                "description": "Запрос для установки пригласившего пользователя по коду приглашения. Код должен состоять из 16 символов: только заглавные латинские буквы и цифры (A–Z, 0–9).",
                "required": [
                    "invite_code"
                ],
                "properties": {
                    "invite_code": {
                        "description": "Пригласительный код. Должен содержать ровно 16 символов: заглавные латинские буквы и цифры.",
                        "type": "string",
                        "maxLength": 16,
                        "minLength": 16,
                        "pattern": "^[A-Z0-9]{16}$",
                        "example": "AB12CD34EF56GH78"
                    }
                },
                "type": "object"
            },
            "AddingLanguageRequest": {
                "title": "Adding Language Request (Добавление нового языка)",
                "description": "Схема запроса на добавление нового языка в систему. Все поля обязательны.",
                "required": [
                    "name",
                    "native_name",
                    "code",
                    "flag",
                    "locale_lang"
                ],
                "properties": {
                    "name": {
                        "description": "Название языка на целевом языке (например, 'English')",
                        "type": "string",
                        "example": "English"
                    },
                    "native_name": {
                        "description": "Название языка на родном языке (например, 'Deutsch' для немецкого)",
                        "type": "string",
                        "example": "English"
                    },
                    "code": {
                        "description": "Двухсимвольный код языка по ISO 639-1",
                        "type": "string",
                        "maxLength": 2,
                        "minLength": 2,
                        "pattern": "^[a-z]{2}$",
                        "example": "en"
                    },
                    "flag": {
                        "description": "Путь к изображению флага (проверяется существование и принадлежность к каталогу изображений)",
                        "type": "string",
                        "example": "flags/en.png"
                    },
                    "locale_lang": {
                        "description": "Уникальный код локали (например, 'en_US', должен быть уникальным в таблице `languages` по полю `locale`)",
                        "type": "string",
                        "example": "en_US"
                    }
                },
                "type": "object"
            },
            "ActivatePromocodeRequest": {
                "title": "Activate Promocode Request (Активация промокода)",
                "description": "Схема запроса для активации промокода. Код должен состоять из 19 символов, разделённых дефисами, и быть в формате XXXX-XXXX-XXXX-XXXX (заглавные латинские буквы и цифры).",
                "required": [
                    "code"
                ],
                "properties": {
                    "code": {
                        "description": "Промокод в формате XXXX-XXXX-XXXX-XXXX. Только заглавные буквы и цифры. Пример: A1B2-C3D4-E5F6-G7H8",
                        "type": "string",
                        "maxLength": 19,
                        "minLength": 19,
                        "pattern": "^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$",
                        "example": "AB12-CD34-EF56-GH78"
                    }
                },
                "type": "object"
            },
            "CreatePromocodeRequest": {
                "title": "Create Promocode Request (Создание промокодов)",
                "description": "Схема для создания одного или нескольких промокодов. Требуется указать количество создаваемых кодов (целое положительное число).",
                "required": [
                    "count"
                ],
                "properties": {
                    "count": {
                        "description": "Количество создаваемых промокодов. Целое положительное число, минимум 1.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 10
                    }
                },
                "type": "object"
            },
            "DatesForCountUsersByMonthsRequestQuery": {
                "title": "Dates For Count Users By Months Request Query (Диапазон месяцев для подсчёта пользователей)",
                "description": "Query-параметры для фильтрации по диапазону месяцев. Формат дат: YYYY-MM. Если указано одно значение, второе также обязательно. По умолчанию используется период с начала текущего года по текущий месяц.",
                "properties": {
                    "start_month": {
                        "description": "Начальный месяц в формате YYYY-MM. Должен быть меньше или равен end_month.",
                        "type": "string",
                        "format": "date",
                        "pattern": "^\\d{4}-(0[1-9]|1[0-2])$",
                        "example": "2024-01"
                    },
                    "end_month": {
                        "description": "Конечный месяц в формате YYYY-MM. Должен быть больше или равен start_month.",
                        "type": "string",
                        "format": "date",
                        "pattern": "^\\d{4}-(0[1-9]|1[0-2])$",
                        "example": "2024-08"
                    }
                },
                "type": "object"
            },
            "AddingNewTariffRequest": {
                "title": "Adding New Tariff Request (Добавление нового тарифа)",
                "description": "Схема запроса для создания нового тарифа с уникальным количеством дней и названием.",
                "required": [
                    "name",
                    "days"
                ],
                "properties": {
                    "name": {
                        "description": "Название тарифа.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Стандартный тариф"
                    },
                    "days": {
                        "description": "Количество дней тарифа. Должно быть уникальным в базе данных.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 30
                    }
                },
                "type": "object"
            },
            "EndTestRequest": {
                "title": "End Test Request (Завершение теста)",
                "description": "Запрос для завершения теста с идентификатором попытки, флагом автоматического завершения и массивом ответов.",
                "required": [
                    "attemptId",
                    "automatic",
                    "answers"
                ],
                "properties": {
                    "attemptId": {
                        "description": "Идентификатор попытки теста.",
                        "type": "integer",
                        "example": 123
                    },
                    "automatic": {
                        "description": "Флаг, указывающий, было ли завершение автоматическим.",
                        "type": "boolean",
                        "example": false
                    },
                    "answers": {
                        "description": "Массив ответов на вопросы теста.",
                        "type": "array",
                        "items": {
                            "required": [
                                "question_id"
                            ],
                            "properties": {
                                "question_id": {
                                    "description": "Идентификатор вопроса.",
                                    "type": "integer",
                                    "example": 10
                                },
                                "answer_id": {
                                    "description": "Идентификатор выбранного ответа. Может быть null.",
                                    "type": "integer",
                                    "example": 5,
                                    "nullable": true
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "StartTestRequest": {
                "title": "Start Test Request (Начало теста)",
                "description": "Запрос для начала теста с указанием идентификатора теста.",
                "required": [
                    "testId"
                ],
                "properties": {
                    "testId": {
                        "description": "Идентификатор теста для запуска.",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "CodeGoogleAuthenticatorRequest": {
                "title": "Code Google Authenticator Request (Данные для подтверждения Google Authenticator)",
                "description": "Данные для подтверждения двухфакторной аутентификации с поомощью Google Authenticator.",
                "required": [
                    "token",
                    "code"
                ],
                "properties": {
                    "token": {
                        "description": "Токен для верификации пользователя.",
                        "type": "string",
                        "example": "abcdef123456"
                    },
                    "code": {
                        "description": "Код Google Authenticator.",
                        "type": "string",
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "ConfirmationCodeEmailTwoFactorAuthorizationRequest": {
                "title": "Confirmation Code Email Two Factor Authorization Request (Подтверждение двухфакторной аутентификации по Email)",
                "description": "Данные для подтверждения двухфакторной аутентификации по Email.",
                "required": [
                    "token",
                    "code"
                ],
                "properties": {
                    "token": {
                        "description": "Токен для верификации пользователя.",
                        "type": "string",
                        "example": "abcdef123456"
                    },
                    "code": {
                        "description": "Код подтверждения из email, ровно 6 символов.",
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6,
                        "example": "123456"
                    }
                },
                "type": "object"
            },
            "EnableDisableATwoFactorAuthorizationRequest": {
                "title": "Enable Disable A Two Factor Authorization Request (Включение или отключение двухфакторной аутентификации)",
                "description": "Данные для включения или отключения двухфакторной аутентификации с помощью электронной почты или Google Authorization.",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "description": "Тип двухфакторной аутентификации.",
                        "type": "string",
                        "enum": [
                            "email",
                            "googleAuthenticator"
                        ],
                        "example": "email"
                    }
                },
                "type": "object"
            },
            "TwoFactorAuthorizationTokenRequest": {
                "title": "TwoFactorAuthorizationTokenRequest (Запрос токена двухфакторной аутентификации для отправки электронного письма с кодом для авторизации)",
                "description": "Запрос токена двухфакторной аутентификации для отправки электронного письма с кодом для авторизации",
                "required": [
                    "token"
                ],
                "properties": {
                    "token": {
                        "description": "Токен для двухфакторной аутентификации.",
                        "type": "string",
                        "example": "abcdef123456"
                    }
                },
                "type": "object"
            },
            "UseRecoveryCodeRequest": {
                "title": "Use Recovery Code Request (Данные на использование кода восстановления)",
                "description": "Данные для запроса с токеном и кодом восстановления для двухфакторной аутентификации.",
                "required": [
                    "token",
                    "recovery_code"
                ],
                "properties": {
                    "token": {
                        "description": "Токен двухфакторной аутентификации.",
                        "type": "string",
                        "example": "abcdef123456"
                    },
                    "recovery_code": {
                        "description": "Код восстановления длиной ровно 8 символов.",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 8,
                        "example": "1234ABCD"
                    }
                },
                "type": "object"
            },
            "UpdatePasswordRequest": {
                "title": "Update Password Request Auth User (Данные для обновления пароля авторизованного пользователя )",
                "description": "Данные для запроса для обновления пароля авторизованного пользователя",
                "required": [
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "password": {
                        "description": "Новый пароль, минимум 8 символов, должен содержать заглавные и строчные буквы, цифры и специальные символы.",
                        "type": "string",
                        "minLength": 8,
                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$",
                        "example": "StrongPass1!"
                    },
                    "password_confirmation": {
                        "description": "Подтверждение пароля, должно совпадать с полем password.",
                        "type": "string",
                        "example": "StrongPass1!"
                    }
                },
                "type": "object"
            },
            "UploadRequest": {
                "title": "Upload Request (Загрузка файла)",
                "description": "Данные запроса для загрузки файла (максимальный размер 10 МБ).",
                "required": [
                    "file"
                ],
                "properties": {
                    "file": {
                        "description": "Файл для загрузки",
                        "type": "string",
                        "format": "binary",
                        "example": null
                    }
                },
                "type": "object"
            },
            "GetVoicesRequest": {
                "title": "Get Voices Request Query Params (Query параметры запроса получения данных о поддерживаемых голосах в системе)",
                "description": "Query-параметры для получения данных о поддерживаемых голосах в системе. Оба параметра являются необязательными и используются для пагинации.",
                "properties": {
                    "page": {
                        "description": "Номер страницы",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "countOnPage": {
                        "description": "Количество элементов на странице",
                        "type": "integer",
                        "minimum": 1,
                        "example": 10
                    }
                },
                "type": "object"
            },
            "InviterResource": {
                "title": "Inviter Resource",
                "description": "Информация о пригласившем пользователе",
                "properties": {
                    "id": {
                        "description": "Уникальный идентификатор пользователя",
                        "type": "integer",
                        "example": 123
                    },
                    "name": {
                        "description": "Имя пользователя",
                        "type": "string",
                        "example": "Иван Иванов"
                    },
                    "avatar": {
                        "description": "URL аватара пользователя, может отсутствовать",
                        "type": "string",
                        "example": "https://example.com/avatars/123.jpg",
                        "nullable": true
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "Unauthorized": {
                "description": "Пользователь не авторизован",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "error"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Пользователь не авторизован и не имеет доступа к данным"
                                },
                                "errors": {
                                    "type": "object",
                                    "nullable": true
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "parameters": {
            "AcceptLanguageHeader": {
                "name": "Accept-Language",
                "in": "header",
                "description": "Язык локали",
                "required": true,
                "schema": {
                    "type": "string",
                    "default": "ru",
                    "enum": [
                        "ru",
                        "en"
                    ]
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Аутентификация",
            "description": "Аутентификация"
        },
        {
            "name": "Аутентификация через OAuth",
            "description": "Аутентификация через OAuth"
        },
        {
            "name": "Обновление токенов авторизации",
            "description": "Обновление токенов авторизации"
        },
        {
            "name": "Выход из аккаунта",
            "description": "Выход из аккаунта"
        },
        {
            "name": "Сброс пароля для неавторизованного пользователя",
            "description": "Сброс пароля для неавторизованного пользователя"
        },
        {
            "name": "Обновление пароля авторизованного пользователя",
            "description": "Обновление пароля авторизованного пользователя"
        },
        {
            "name": "Регистрация",
            "description": "Регистрация"
        },
        {
            "name": "Верификация электронного адреса",
            "description": "Верификация электронного адреса"
        },
        {
            "name": "Привязка к пользователю, который пригласил в систему",
            "description": "Привязка к пользователю, который пригласил в систему"
        },
        {
            "name": "Двухфакторная аутентификация",
            "description": "Двухфакторная аутентификация"
        }
    ]
}